/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/booking/admin/blocked-schedules/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Admin View:
         *     - Can list and filter ALL blocked schedules (active or inactive)
         *     - Can perform bulk restore and bulk soft-delete operations */
        get: operations["api_booking_admin_blocked_schedules_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/booking/admin/blocked-schedules/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Admin View:
         *     - Can list and filter ALL blocked schedules (active or inactive)
         *     - Can perform bulk restore and bulk soft-delete operations */
        get: operations["api_booking_admin_blocked_schedules_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/booking/admin/blocked-schedules/bulk_delete/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Admin View:
         *     - Can list and filter ALL blocked schedules (active or inactive)
         *     - Can perform bulk restore and bulk soft-delete operations */
        post: operations["api_booking_admin_blocked_schedules_bulk_delete_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/booking/admin/blocked-schedules/bulk_restore/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Admin View:
         *     - Can list and filter ALL blocked schedules (active or inactive)
         *     - Can perform bulk restore and bulk soft-delete operations */
        post: operations["api_booking_admin_blocked_schedules_bulk_restore_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/booking/blocked-schedules/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Public/Client View:
         *     - Lists only ACTIVE blocked schedules
         *     - Public access to list
         *     - Authenticated users can create/update/delete
         *     - Delete = soft delete (mark inactive)
         *     - Restore single schedule if needed */
        get: operations["api_booking_blocked_schedules_list"];
        put?: never;
        /** @description Public/Client View:
         *     - Lists only ACTIVE blocked schedules
         *     - Public access to list
         *     - Authenticated users can create/update/delete
         *     - Delete = soft delete (mark inactive)
         *     - Restore single schedule if needed */
        post: operations["api_booking_blocked_schedules_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/booking/blocked-schedules/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Public/Client View:
         *     - Lists only ACTIVE blocked schedules
         *     - Public access to list
         *     - Authenticated users can create/update/delete
         *     - Delete = soft delete (mark inactive)
         *     - Restore single schedule if needed */
        get: operations["api_booking_blocked_schedules_retrieve"];
        /** @description Public/Client View:
         *     - Lists only ACTIVE blocked schedules
         *     - Public access to list
         *     - Authenticated users can create/update/delete
         *     - Delete = soft delete (mark inactive)
         *     - Restore single schedule if needed */
        put: operations["api_booking_blocked_schedules_update"];
        post?: never;
        /** @description Public/Client View:
         *     - Lists only ACTIVE blocked schedules
         *     - Public access to list
         *     - Authenticated users can create/update/delete
         *     - Delete = soft delete (mark inactive)
         *     - Restore single schedule if needed */
        delete: operations["api_booking_blocked_schedules_destroy"];
        options?: never;
        head?: never;
        /** @description Public/Client View:
         *     - Lists only ACTIVE blocked schedules
         *     - Public access to list
         *     - Authenticated users can create/update/delete
         *     - Delete = soft delete (mark inactive)
         *     - Restore single schedule if needed */
        patch: operations["api_booking_blocked_schedules_partial_update"];
        trace?: never;
    };
    "/api/booking/blocked-schedules/{id}/restore/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Public/Client View:
         *     - Lists only ACTIVE blocked schedules
         *     - Public access to list
         *     - Authenticated users can create/update/delete
         *     - Delete = soft delete (mark inactive)
         *     - Restore single schedule if needed */
        post: operations["api_booking_blocked_schedules_restore_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/booking/room-bookings/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_booking_room_bookings_list"];
        put?: never;
        post: operations["api_booking_room_bookings_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/booking/room-bookings/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_booking_room_bookings_retrieve"];
        put: operations["api_booking_room_bookings_update"];
        post?: never;
        delete: operations["api_booking_room_bookings_destroy"];
        options?: never;
        head?: never;
        patch: operations["api_booking_room_bookings_partial_update"];
        trace?: never;
    };
    "/api/booking/room-bookings/{id}/restore/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["api_booking_room_bookings_restore_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/library/books/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_library_books_list"];
        put?: never;
        post: operations["api_library_books_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/library/books/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_library_books_retrieve"];
        put: operations["api_library_books_update"];
        post?: never;
        delete: operations["api_library_books_destroy"];
        options?: never;
        head?: never;
        patch: operations["api_library_books_partial_update"];
        trace?: never;
    };
    "/api/library/books/{id}/loan-history/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["BookLoanHistoryList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/library/books/loan-history/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_library_books_loan_history_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/library/genres/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_library_genres_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/library/genres-with-books/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_library_genres_with_books_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/library/languages/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_library_languages_list"];
        put?: never;
        post: operations["api_library_languages_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/library/languages/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_library_languages_retrieve"];
        put: operations["api_library_languages_update"];
        post?: never;
        delete: operations["api_library_languages_destroy"];
        options?: never;
        head?: never;
        patch: operations["api_library_languages_partial_update"];
        trace?: never;
    };
    "/api/library/loans/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_library_loans_list"];
        put?: never;
        post: operations["api_library_loans_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/library/loans/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_library_loans_retrieve"];
        put: operations["api_library_loans_update"];
        post?: never;
        delete: operations["api_library_loans_destroy"];
        options?: never;
        head?: never;
        patch: operations["api_library_loans_partial_update"];
        trace?: never;
    };
    "/api/library/material-types/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_library_material_types_list"];
        put?: never;
        post: operations["api_library_material_types_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/library/material-types/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_library_material_types_retrieve"];
        put: operations["api_library_material_types_update"];
        post?: never;
        delete: operations["api_library_material_types_destroy"];
        options?: never;
        head?: never;
        patch: operations["api_library_material_types_partial_update"];
        trace?: never;
    };
    "/api/users/admin/profiles/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all profiles (admin only)
         * @description Retrieve a list of all user profiles. Requires admin privileges.
         */
        get: operations["api_users_admin_profiles_list"];
        put?: never;
        /**
         * Create a profile (admin only)
         * @description Create a new user profile. Requires admin privileges.
         */
        post: operations["api_users_admin_profiles_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/admin/profiles/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a profile (admin only)
         * @description Retrieve a single profile by ID. Requires admin privileges.
         */
        get: operations["api_users_admin_profiles_retrieve"];
        /**
         * Update a profile (admin only)
         * @description Fully update an existing profile by ID. Requires admin privileges.
         */
        put: operations["api_users_admin_profiles_update"];
        post?: never;
        /**
         * Delete a profile (admin only)
         * @description Delete an existing profile by ID. Requires admin privileges.
         */
        delete: operations["api_users_admin_profiles_destroy"];
        options?: never;
        head?: never;
        /**
         * Partially update a profile (admin only)
         * @description Partially update fields of an existing profile by ID. Requires admin privileges.
         */
        patch: operations["api_users_admin_profiles_partial_update"];
        trace?: never;
    };
    "/api/users/login/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * User login
         * @description Authenticate a user, returning a success message in the body and JWT tokens via HTTP-only cookies.
         */
        post: operations["api_users_login_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/me/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve own profile
         * @description Retrieve the authenticated user's profile. If it does not exist, it will be created automatically.
         */
        get: operations["api_users_me_retrieve"];
        /**
         * Update own profile
         * @description Fully update the authenticated user's profile.
         */
        put: operations["api_users_me_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update own profile
         * @description Update the authenticated user's profile.
         */
        patch: operations["api_users_me_partial_update"];
        trace?: never;
    };
    "/api/users/password_change/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update user password
         * @description Allows an authenticated user to update their password by providing the current (old) password and the new password.Validates the old password and enforces password policies on the new one.
         */
        post: operations["api_users_password_change_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/password_reset/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Password Reset
         * @description Solicita un token para restablecer la contraseña. Este endpoint envía un email con instrucciones.
         */
        post: operations["api_users_password_reset_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/password_reset/confirm/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Confirmación de Password Reset
         * @description Confirma el token y establece la nueva contraseña.
         */
        post: operations["api_users_password_reset_confirm_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/password_reset/validate_token/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validar Token de Password Reset
         * @description Verifica que un token de restablecimiento de contraseña es válido.
         */
        post: operations["api_users_password_reset_validate_token_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/signout/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * User signout
         * @description Logs a user out by deleting their authentication tokens (access and refresh) and CSRF token from HTTP-only cookies.
         */
        post: operations["api_users_signout_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/signup/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * User registration
         * @description Register a new user. On successful registration, a success message is returned in the body, and JWT tokens are set in HTTP-only cookies.
         */
        post: operations["api_users_signup_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/token/refresh/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh access token
         * @description Generates a new short-lived access token using the refresh token stored in an HttpOnly cookie. The new access token is also returned via an HttpOnly cookie.
         */
        post: operations["api_users_token_refresh_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        BlockedSchedule: {
            /** Format: uuid */
            readonly id: string;
            /** Format: date */
            date: string;
            /** Format: time */
            start_time: string;
            /** Format: time */
            end_time: string;
            reason: string;
            description?: string;
            is_permanent?: boolean;
            is_active?: boolean;
        };
        BlockedScheduleRequest: {
            /** Format: date */
            date: string;
            /** Format: time */
            start_time: string;
            /** Format: time */
            end_time: string;
            reason: string;
            description?: string;
            is_permanent?: boolean;
            is_active?: boolean;
        };
        /** @description Serializer for the Book model. */
        Book: {
            /** Format: uuid */
            readonly id: string;
            title: string;
            author?: string;
            isbn?: string;
            material_type: string | null;
            /** Format: date */
            publication_date?: string | null;
            pages?: number | null;
            quantity_in_stock?: number | null;
            readonly available_copies: number | null;
            language: string | null;
            publisher?: string;
            genres: (string | null)[];
            description?: string;
            /** Format: uri */
            cover_url?: string;
        };
        /** @description Serializer for the Book model. */
        BookRequest: {
            title: string;
            author?: string;
            isbn?: string;
            material_type: string | null;
            /** Format: date */
            publication_date?: string | null;
            pages?: number | null;
            quantity_in_stock?: number | null;
            language: string | null;
            publisher?: string;
            genres: (string | null)[];
            description?: string;
            /** Format: uri */
            cover_url?: string;
        };
        EmailRequest: {
            /** Format: email */
            email: string;
        };
        /** @description Serializer for the Genre model. */
        Genre: {
            readonly id: number;
            name: string;
            description?: string;
        };
        /** @description Serializer for a genre with a list of its books. */
        GenreBooks: {
            readonly id: number;
            name: string;
            description?: string;
            readonly books: string[];
        };
        /** @description Serializer for the Language model. */
        Language: {
            readonly id: number;
            name: string;
        };
        /** @description Serializer for the Language model. */
        LanguageRequest: {
            name: string;
        };
        /** @description Serializer for the Loan model. */
        Loan: {
            /** Format: uuid */
            readonly id: string;
            user: number;
            /** Format: uuid */
            book: string;
            /** Format: email */
            readonly user_email: string;
            readonly book_title: string;
            /** Format: date */
            start_date: string;
            /** Format: date */
            end_date: string;
            readonly status: components["schemas"]["StatusEnum"];
        };
        /** @description Serializer for the Loan model. */
        LoanRequest: {
            user: number;
            /** Format: uuid */
            book: string;
            /** Format: date */
            start_date: string;
            /** Format: date */
            end_date: string;
        };
        LoginRequest: {
            email: string;
            password: string;
        };
        /** @description Serializer for the MaterialType model. */
        MaterialType: {
            readonly id: number;
            name: string;
        };
        /** @description Serializer for the MaterialType model. */
        MaterialTypeRequest: {
            name: string;
        };
        PasswordChange: {
            old_password: string;
            new_password: string;
        };
        PasswordChangeRequest: {
            old_password: string;
            new_password: string;
        };
        PasswordTokenRequest: {
            password: string;
            token: string;
        };
        PatchedBlockedScheduleRequest: {
            /** Format: date */
            date?: string;
            /** Format: time */
            start_time?: string;
            /** Format: time */
            end_time?: string;
            reason?: string;
            description?: string;
            is_permanent?: boolean;
            is_active?: boolean;
        };
        /** @description Serializer for the Book model. */
        PatchedBookRequest: {
            title?: string;
            author?: string;
            isbn?: string;
            material_type?: string | null;
            /** Format: date */
            publication_date?: string | null;
            pages?: number | null;
            quantity_in_stock?: number | null;
            language?: string | null;
            publisher?: string;
            genres?: (string | null)[];
            description?: string;
            /** Format: uri */
            cover_url?: string;
        };
        /** @description Serializer for the Language model. */
        PatchedLanguageRequest: {
            name?: string;
        };
        /** @description Serializer for the Loan model. */
        PatchedLoanRequest: {
            user?: number;
            /** Format: uuid */
            book?: string;
            /** Format: date */
            start_date?: string;
            /** Format: date */
            end_date?: string;
        };
        /** @description Serializer for the MaterialType model. */
        PatchedMaterialTypeRequest: {
            name?: string;
        };
        PatchedProfileAdminRequest: {
            /** @description ID of the user associated with this profile */
            user_id?: number;
            /** Documento nacional */
            national_document?: string | null;
            /**
             * Fecha de nacimiento
             * Format: date
             */
            birth_date?: string | null;
            /** Teléfono */
            phone?: string | null;
            /** Dirección */
            address?: string | null;
        };
        PatchedProfileRequest: {
            /** Documento nacional */
            national_document?: string | null;
            /**
             * Fecha de nacimiento
             * Format: date
             */
            birth_date?: string | null;
            /** Teléfono */
            phone?: string | null;
            /** Dirección */
            address?: string | null;
        };
        PatchedRoomBookingRequest: {
            request_number?: string;
            /** Format: date */
            event_date?: string;
            /** Format: time */
            start_time?: string;
            /** Format: time */
            end_time?: string;
            event_type?: string;
            participant_count?: number;
            description?: string;
            requires_equipment?: boolean;
            requested_equipment?: string;
            full_name?: string;
            national_document?: string;
            /** Format: email */
            email?: string;
            phone?: string;
            status?: string;
            /** Format: date-time */
            response_date?: string | null;
            admin_comments?: string;
            is_active?: boolean;
        };
        Profile: {
            /**
             * ID único
             * Format: uuid
             */
            readonly id: string;
            readonly user: components["schemas"]["User"];
            /** Documento nacional */
            national_document?: string | null;
            /**
             * Fecha de nacimiento
             * Format: date
             */
            birth_date?: string | null;
            /** Teléfono */
            phone?: string | null;
            /** Dirección */
            address?: string | null;
        };
        ProfileAdmin: {
            /**
             * ID único
             * Format: uuid
             */
            readonly id: string;
            readonly user: components["schemas"]["User"];
            /** Documento nacional */
            national_document?: string | null;
            /**
             * Fecha de nacimiento
             * Format: date
             */
            birth_date?: string | null;
            /** Teléfono */
            phone?: string | null;
            /** Dirección */
            address?: string | null;
        };
        ProfileAdminRequest: {
            /** @description ID of the user associated with this profile */
            user_id: number;
            /** Documento nacional */
            national_document?: string | null;
            /**
             * Fecha de nacimiento
             * Format: date
             */
            birth_date?: string | null;
            /** Teléfono */
            phone?: string | null;
            /** Dirección */
            address?: string | null;
        };
        ProfileRequest: {
            /** Documento nacional */
            national_document?: string | null;
            /**
             * Fecha de nacimiento
             * Format: date
             */
            birth_date?: string | null;
            /** Teléfono */
            phone?: string | null;
            /** Dirección */
            address?: string | null;
        };
        ResetTokenRequest: {
            token: string;
        };
        RoomBooking: {
            /** Format: uuid */
            readonly id: string;
            request_number: string;
            /** Format: date */
            event_date: string;
            /** Format: time */
            start_time: string;
            /** Format: time */
            end_time: string;
            event_type: string;
            participant_count: number;
            description: string;
            requires_equipment?: boolean;
            requested_equipment?: string;
            full_name: string;
            national_document: string;
            /** Format: email */
            email: string;
            phone: string;
            status: string;
            /** Format: date-time */
            response_date?: string | null;
            admin_comments?: string;
            is_active?: boolean;
        };
        RoomBookingRequest: {
            request_number: string;
            /** Format: date */
            event_date: string;
            /** Format: time */
            start_time: string;
            /** Format: time */
            end_time: string;
            event_type: string;
            participant_count: number;
            description: string;
            requires_equipment?: boolean;
            requested_equipment?: string;
            full_name: string;
            national_document: string;
            /** Format: email */
            email: string;
            phone: string;
            status: string;
            /** Format: date-time */
            response_date?: string | null;
            admin_comments?: string;
            is_active?: boolean;
        };
        SingUpRequest: {
            /** Format: email */
            email: string;
            password: string;
            first_name?: string;
            last_name?: string;
        };
        /**
         * @description * `Active` - Active
         *     * `Returned` - Returned
         *     * `Overdue` - Overdue
         * @enum {string}
         */
        StatusEnum: "Active" | "Returned" | "Overdue";
        StatusOKResponse: {
            status: string;
        };
        User: {
            readonly id: number;
            first_name?: string;
            last_name?: string;
            /**
             * Email address
             * Format: email
             */
            email?: string;
        };
        UserProfileCreateAdminRequest: {
            /** Format: email */
            email: string;
            password: string;
            first_name: string;
            last_name: string;
            national_document?: string;
            /** Format: date */
            birth_date?: string | null;
            phone?: string;
            address?: string;
        };
        UserRequest: {
            first_name?: string;
            last_name?: string;
            /**
             * Email address
             * Format: email
             */
            email?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    api_booking_admin_blocked_schedules_list: {
        parameters: {
            query?: {
                date?: string;
                reason?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlockedSchedule"][];
                };
            };
        };
    };
    api_booking_admin_blocked_schedules_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Blocked Schedule. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlockedSchedule"];
                };
            };
        };
    };
    api_booking_admin_blocked_schedules_bulk_delete_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BlockedScheduleRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["BlockedScheduleRequest"];
                "multipart/form-data": components["schemas"]["BlockedScheduleRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlockedSchedule"];
                };
            };
        };
    };
    api_booking_admin_blocked_schedules_bulk_restore_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BlockedScheduleRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["BlockedScheduleRequest"];
                "multipart/form-data": components["schemas"]["BlockedScheduleRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlockedSchedule"];
                };
            };
        };
    };
    api_booking_blocked_schedules_list: {
        parameters: {
            query?: {
                date?: string;
                reason?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlockedSchedule"][];
                };
            };
        };
    };
    api_booking_blocked_schedules_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BlockedScheduleRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["BlockedScheduleRequest"];
                "multipart/form-data": components["schemas"]["BlockedScheduleRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlockedSchedule"];
                };
            };
        };
    };
    api_booking_blocked_schedules_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Blocked Schedule. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlockedSchedule"];
                };
            };
        };
    };
    api_booking_blocked_schedules_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Blocked Schedule. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BlockedScheduleRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["BlockedScheduleRequest"];
                "multipart/form-data": components["schemas"]["BlockedScheduleRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlockedSchedule"];
                };
            };
        };
    };
    api_booking_blocked_schedules_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Blocked Schedule. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_booking_blocked_schedules_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Blocked Schedule. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedBlockedScheduleRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedBlockedScheduleRequest"];
                "multipart/form-data": components["schemas"]["PatchedBlockedScheduleRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlockedSchedule"];
                };
            };
        };
    };
    api_booking_blocked_schedules_restore_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Blocked Schedule. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BlockedScheduleRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["BlockedScheduleRequest"];
                "multipart/form-data": components["schemas"]["BlockedScheduleRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlockedSchedule"];
                };
            };
        };
    };
    api_booking_room_bookings_list: {
        parameters: {
            query?: {
                event_date?: string;
                event_type?: string;
                /** @description A search term. */
                search?: string;
                status?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoomBooking"][];
                };
            };
        };
    };
    api_booking_room_bookings_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RoomBookingRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["RoomBookingRequest"];
                "multipart/form-data": components["schemas"]["RoomBookingRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoomBooking"];
                };
            };
        };
    };
    api_booking_room_bookings_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Room Booking. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoomBooking"];
                };
            };
        };
    };
    api_booking_room_bookings_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Room Booking. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RoomBookingRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["RoomBookingRequest"];
                "multipart/form-data": components["schemas"]["RoomBookingRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoomBooking"];
                };
            };
        };
    };
    api_booking_room_bookings_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Room Booking. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_booking_room_bookings_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Room Booking. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedRoomBookingRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedRoomBookingRequest"];
                "multipart/form-data": components["schemas"]["PatchedRoomBookingRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoomBooking"];
                };
            };
        };
    };
    api_booking_room_bookings_restore_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Room Booking. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RoomBookingRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["RoomBookingRequest"];
                "multipart/form-data": components["schemas"]["RoomBookingRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoomBooking"];
                };
            };
        };
    };
    api_library_books_list: {
        parameters: {
            query?: {
                author?: string;
                genres__name?: string;
                publication_date?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Book"][];
                };
            };
        };
    };
    api_library_books_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BookRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["BookRequest"];
                "multipart/form-data": components["schemas"]["BookRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Book"];
                };
            };
        };
    };
    api_library_books_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this book. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Book"];
                };
            };
        };
    };
    api_library_books_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this book. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BookRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["BookRequest"];
                "multipart/form-data": components["schemas"]["BookRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Book"];
                };
            };
        };
    };
    api_library_books_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this book. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_library_books_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this book. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedBookRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedBookRequest"];
                "multipart/form-data": components["schemas"]["PatchedBookRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Book"];
                };
            };
        };
    };
    BookLoanHistoryList: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Loan"][];
                };
            };
        };
    };
    api_library_books_loan_history_list: {
        parameters: {
            query?: {
                book?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description * `Active` - Active
                 *     * `Returned` - Returned
                 *     * `Overdue` - Overdue */
                status?: "Active" | "Overdue" | "Returned";
                user?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Loan"][];
                };
            };
        };
    };
    api_library_genres_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Genre"][];
                };
            };
        };
    };
    api_library_genres_with_books_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenreBooks"];
                };
            };
        };
    };
    api_library_languages_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Language"][];
                };
            };
        };
    };
    api_library_languages_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LanguageRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["LanguageRequest"];
                "multipart/form-data": components["schemas"]["LanguageRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Language"];
                };
            };
        };
    };
    api_library_languages_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this language. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Language"];
                };
            };
        };
    };
    api_library_languages_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this language. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LanguageRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["LanguageRequest"];
                "multipart/form-data": components["schemas"]["LanguageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Language"];
                };
            };
        };
    };
    api_library_languages_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this language. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_library_languages_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this language. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedLanguageRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedLanguageRequest"];
                "multipart/form-data": components["schemas"]["PatchedLanguageRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Language"];
                };
            };
        };
    };
    api_library_loans_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Loan"][];
                };
            };
        };
    };
    api_library_loans_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoanRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["LoanRequest"];
                "multipart/form-data": components["schemas"]["LoanRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Loan"];
                };
            };
        };
    };
    api_library_loans_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this loan. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Loan"];
                };
            };
        };
    };
    api_library_loans_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this loan. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoanRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["LoanRequest"];
                "multipart/form-data": components["schemas"]["LoanRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Loan"];
                };
            };
        };
    };
    api_library_loans_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this loan. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_library_loans_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this loan. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedLoanRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedLoanRequest"];
                "multipart/form-data": components["schemas"]["PatchedLoanRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Loan"];
                };
            };
        };
    };
    api_library_material_types_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MaterialType"][];
                };
            };
        };
    };
    api_library_material_types_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MaterialTypeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["MaterialTypeRequest"];
                "multipart/form-data": components["schemas"]["MaterialTypeRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MaterialType"];
                };
            };
        };
    };
    api_library_material_types_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this material type. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MaterialType"];
                };
            };
        };
    };
    api_library_material_types_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this material type. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MaterialTypeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["MaterialTypeRequest"];
                "multipart/form-data": components["schemas"]["MaterialTypeRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MaterialType"];
                };
            };
        };
    };
    api_library_material_types_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this material type. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_library_material_types_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this material type. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedMaterialTypeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedMaterialTypeRequest"];
                "multipart/form-data": components["schemas"]["PatchedMaterialTypeRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MaterialType"];
                };
            };
        };
    };
    api_users_admin_profiles_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of profiles retrieved successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProfileAdmin"][];
                };
            };
            /** @description Forbidden - admin access required. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_users_admin_profiles_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserProfileCreateAdminRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["UserProfileCreateAdminRequest"];
                "multipart/form-data": components["schemas"]["UserProfileCreateAdminRequest"];
            };
        };
        responses: {
            /** @description Profile created successfully. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProfileAdmin"];
                };
            };
            /** @description Invalid input data. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - admin access required. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_users_admin_profiles_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Perfil. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Profile retrieved successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProfileAdmin"];
                };
            };
            /** @description Forbidden - admin access required. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Profile not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_users_admin_profiles_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Perfil. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProfileAdminRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ProfileAdminRequest"];
                "multipart/form-data": components["schemas"]["ProfileAdminRequest"];
            };
        };
        responses: {
            /** @description Profile updated successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProfileAdmin"];
                };
            };
            /** @description Invalid input data. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - admin access required. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Profile not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_users_admin_profiles_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Perfil. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Profile deleted successfully. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - admin access required. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Profile not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_users_admin_profiles_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this Perfil. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedProfileAdminRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedProfileAdminRequest"];
                "multipart/form-data": components["schemas"]["PatchedProfileAdminRequest"];
            };
        };
        responses: {
            /** @description Profile updated successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProfileAdmin"];
                };
            };
            /** @description Invalid input data. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - admin access required. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Profile not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_users_login_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["LoginRequest"];
                "multipart/form-data": components["schemas"]["LoginRequest"];
            };
        };
        responses: {
            /** @description Login successful. Tokens are set in HTTP-only cookies. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid input or missing fields (e.g., email, password). */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid credentials. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_users_me_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Profile retrieved successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Profile"];
                };
            };
            /** @description Authentication required. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_users_me_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ProfileRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ProfileRequest"];
                "multipart/form-data": components["schemas"]["ProfileRequest"];
            };
        };
        responses: {
            /** @description Profile updated successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Profile"];
                };
            };
            /** @description Invalid input. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_users_me_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedProfileRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedProfileRequest"];
                "multipart/form-data": components["schemas"]["PatchedProfileRequest"];
            };
        };
        responses: {
            /** @description Profile updated successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Profile"];
                };
            };
            /** @description Invalid input. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication required. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_users_password_change_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordChangeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PasswordChangeRequest"];
                "multipart/form-data": components["schemas"]["PasswordChangeRequest"];
            };
        };
        responses: {
            /** @description Password updated successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid old password or validation error in new password. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PasswordChange"];
                };
            };
            /** @description Authentication credentials were not provided. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_users_password_reset_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmailRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["EmailRequest"];
                "multipart/form-data": components["schemas"]["EmailRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StatusOKResponse"];
                };
            };
        };
    };
    api_users_password_reset_confirm_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordTokenRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PasswordTokenRequest"];
                "multipart/form-data": components["schemas"]["PasswordTokenRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StatusOKResponse"];
                };
            };
        };
    };
    api_users_password_reset_validate_token_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResetTokenRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["ResetTokenRequest"];
                "multipart/form-data": components["schemas"]["ResetTokenRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StatusOKResponse"];
                };
            };
        };
    };
    api_users_signout_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Signout successful. All authentication cookies have been deleted. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_users_signup_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SingUpRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["SingUpRequest"];
                "multipart/form-data": components["schemas"]["SingUpRequest"];
            };
        };
        responses: {
            /** @description User registered successfully. Tokens are set in HTTP-only cookies. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid input data. This could be due to missing required fields, invalid data formats, or a user with the same email already existing. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_users_token_refresh_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description New access token generated successfully. The new token is set in an HTTP-only cookie. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Refresh token missing, invalid, or expired. The client must log in again to obtain new tokens. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
